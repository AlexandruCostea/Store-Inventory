{
	"info": {
		"_postman_id": "03c817bc-8d18-479f-bafc-9f63185c4a4a",
		"name": "Store-Inventory-HTTP",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33971084"
	},
	"item": [
		{
			"name": "check connectivity",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body is JSON\", function () {\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Response message is correct\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.eql('Welcome to the inventory API');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api"
					]
				}
			},
			"response": []
		},
		{
			"name": "get items",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body is JSON\", function () {\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Response should be an array\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an('array');\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains at least one item (if not empty)\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    if (jsonData.length > 0) {\r",
							"        pm.expect(jsonData[0]).to.be.an('object');\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"First 5 items (if available) contain expected properties with correct data types\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var maxEntriesToCheck = Math.min(jsonData.length, 5);\r",
							"\r",
							"    for (let i = 0; i < maxEntriesToCheck; i++) {\r",
							"        let item = jsonData[i];\r",
							"        pm.expect(item).to.have.property(\"id\").that.is.a(\"number\");\r",
							"        pm.expect(item).to.have.property(\"name\").that.is.a(\"string\");\r",
							"        pm.expect(item).to.have.property(\"quantity\").that.is.a(\"number\");\r",
							"        pm.expect(item).to.have.property(\"cost\").that.is.a(\"number\");\r",
							"        pm.expect(item).to.have.property(\"supplier\").that.is.a(\"string\");\r",
							"        pm.expect(item).to.have.property(\"expiration_date\").that.is.a(\"string\");\r",
							"    }\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/items",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"items"
					]
				}
			},
			"response": []
		},
		{
			"name": "get item",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const baseUrl = pm.environment.get(\"baseUrl\") || \"http://localhost:3000\";\r",
							"\r",
							"pm.sendRequest({\r",
							"    url: `${baseUrl}/api/items/1`,\r",
							"    method: \"GET\"\r",
							"}, function (err, res) {\r",
							"    pm.test(\"Valid ID: Status code is 200\", function () {\r",
							"        pm.expect(res.code).to.eql(200);\r",
							"    });\r",
							"\r",
							"    pm.test(\"Valid ID: Response body is JSON\", function () {\r",
							"        pm.expect(res.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"    });\r",
							"\r",
							"    pm.test(\"Valid ID: Response contains expected properties with correct data types\", function () {\r",
							"        let jsonData = res.json();\r",
							"        pm.expect(jsonData).to.have.property(\"id\").that.is.a(\"number\");\r",
							"        pm.expect(jsonData).to.have.property(\"name\").that.is.a(\"string\");\r",
							"        pm.expect(jsonData).to.have.property(\"quantity\").that.is.a(\"number\");\r",
							"        pm.expect(jsonData).to.have.property(\"cost\").that.is.a(\"number\");\r",
							"        pm.expect(jsonData).to.have.property(\"supplier\").that.is.a(\"string\");\r",
							"        pm.expect(jsonData).to.have.property(\"expiration_date\").that.is.a(\"string\");\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.sendRequest({\r",
							"    url: `${baseUrl}/api/items/abc`,\r",
							"    method: \"GET\"\r",
							"}, function (err, res) {\r",
							"    pm.test(\"Invalid ID: Status code is 400\", function () {\r",
							"        pm.expect(res.code).to.eql(400);\r",
							"    });\r",
							"\r",
							"    pm.test(\"Invalid ID: Error message exists\", function () {\r",
							"        let jsonData = res.json();\r",
							"        pm.expect(jsonData).to.have.property(\"error\").that.is.a(\"string\");\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.sendRequest({\r",
							"    url: `${baseUrl}/api/items/9999`,\r",
							"    method: \"GET\"\r",
							"}, function (err, res) {\r",
							"    pm.test(\"Non-Existent ID: Status code is 404\", function () {\r",
							"        pm.expect(res.code).to.eql(404);\r",
							"    });\r",
							"\r",
							"    pm.test(\"Non-Existent ID: Error message is 'Item not found'\", function () {\r",
							"        let jsonData = res.json();\r",
							"        pm.expect(jsonData).to.have.property(\"error\").that.eql(\"Item not found\");\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.sendRequest({\r",
							"    url: `${baseUrl}/api/items/-1`,\r",
							"    method: \"GET\"\r",
							"}, function (err, res) {\r",
							"    pm.test(\"Invalid ID: Status code is 400\", function () {\r",
							"        pm.expect(res.code).to.eql(400);\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/items/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"items",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "add item",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const baseUrl = pm.environment.get(\"baseUrl\") || \"http://localhost:3000\";\r",
							"\r",
							"pm.sendRequest({\r",
							"    url: `${baseUrl}/api/items`,\r",
							"    method: \"POST\",\r",
							"    header: { \"Content-Type\": \"application/json\" },\r",
							"    body: {\r",
							"        mode: \"raw\",\r",
							"        raw: JSON.stringify({\r",
							"            name: \"New Product\",\r",
							"            quantity: 10,\r",
							"            cost: 20,\r",
							"            supplier: \"Supplier XYZ\",\r",
							"            expiration_date: \"2026-01-01\"\r",
							"        })\r",
							"    }\r",
							"}, function (err, res) {\r",
							"    pm.test(\"Valid Item: Status code is 201\", function () {\r",
							"        pm.expect(res.code).to.eql(201);\r",
							"    });\r",
							"\r",
							"    pm.test(\"Valid Item: Response contains new item details\", function () {\r",
							"        let jsonData = res.json();\r",
							"        pm.expect(jsonData).to.have.property(\"id\").that.is.a(\"number\");\r",
							"        pm.expect(jsonData).to.have.property(\"name\").that.is.a(\"string\");\r",
							"        pm.expect(jsonData).to.have.property(\"quantity\").that.is.a(\"number\");\r",
							"        pm.expect(jsonData).to.have.property(\"cost\").that.is.a(\"number\");\r",
							"        pm.expect(jsonData).to.have.property(\"supplier\").that.is.a(\"string\");\r",
							"        pm.expect(jsonData).to.have.property(\"expiration_date\").that.is.a(\"string\");\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.sendRequest({\r",
							"    url: `${baseUrl}/api/items`,\r",
							"    method: \"POST\",\r",
							"    header: { \"Content-Type\": \"application/json\" },\r",
							"    body: {\r",
							"        mode: \"raw\",\r",
							"        raw: JSON.stringify({\r",
							"            name: \"Incomplete Product\",\r",
							"            cost: 20\r",
							"        })\r",
							"    }\r",
							"}, function (err, res) {\r",
							"    pm.test(\"Invalid Item: Status code is 400\", function () {\r",
							"        pm.expect(res.code).to.eql(400);\r",
							"    });\r",
							"\r",
							"    pm.test(\"Invalid Item: Error message exists\", function () {\r",
							"        let jsonData = res.json();\r",
							"        pm.expect(jsonData).to.have.property(\"error\").that.is.a(\"string\");\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"product\",\r\n    \"quantity\": 12,\r\n    \"cost\": 10,\r\n    \"supplier\": \"somebody\",\r\n    \"expiration_date\": \"2025-12-02\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/api/items",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"items"
					]
				}
			},
			"response": []
		},
		{
			"name": "edit item",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const baseUrl = pm.environment.get(\"baseUrl\") || \"http://localhost:3000\";\r",
							"const validId = 1;\r",
							"const nonExistentId = 9999;\r",
							"\r",
							"pm.sendRequest({\r",
							"    url: `${baseUrl}/api/items/${validId}`,\r",
							"    method: \"PUT\",\r",
							"    header: { \"Content-Type\": \"application/json\" },\r",
							"    body: {\r",
							"        mode: \"raw\",\r",
							"        raw: JSON.stringify({\r",
							"            name: \"Updated Product\",\r",
							"            quantity: 20,\r",
							"            cost: 30,\r",
							"            supplier: \"Updated Supplier\",\r",
							"            expiration_date: \"2027-01-01\"\r",
							"        })\r",
							"    }\r",
							"}, function (err, res) {\r",
							"    pm.test(\"Valid Update: Status code is 200\", function () {\r",
							"        pm.expect(res.code).to.eql(200);\r",
							"    });\r",
							"\r",
							"    pm.test(\"Valid Update: Response contains updated item details\", function () {\r",
							"        let jsonData = res.json();\r",
							"        pm.expect(jsonData).to.have.property(\"id\").that.is.a(\"number\");\r",
							"        pm.expect(jsonData).to.have.property(\"name\").that.is.a(\"string\");\r",
							"        pm.expect(jsonData).to.have.property(\"quantity\").that.is.a(\"number\");\r",
							"        pm.expect(jsonData).to.have.property(\"cost\").that.is.a(\"number\");\r",
							"        pm.expect(jsonData).to.have.property(\"supplier\").that.is.a(\"string\");\r",
							"        pm.expect(jsonData).to.have.property(\"expiration_date\").that.is.a(\"string\");\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.sendRequest({\r",
							"    url: `${baseUrl}/api/items/abc`,\r",
							"    method: \"PUT\",\r",
							"    header: { \"Content-Type\": \"application/json\" },\r",
							"    body: {\r",
							"        mode: \"raw\",\r",
							"        raw: JSON.stringify({\r",
							"            name: \"Invalid ID Test\",\r",
							"            quantity: 10,\r",
							"            cost: 15,\r",
							"            supplier: \"Some Supplier\",\r",
							"            expiration_date: \"2026-12-31\"\r",
							"        })\r",
							"    }\r",
							"}, function (err, res) {\r",
							"    pm.test(\"Invalid ID: Status code is 400\", function () {\r",
							"        pm.expect(res.code).to.eql(400);\r",
							"    });\r",
							"\r",
							"    pm.test(\"Invalid ID: Error message exists\", function () {\r",
							"        let jsonData = res.json();\r",
							"        pm.expect(jsonData).to.have.property(\"error\").that.is.a(\"string\");\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.sendRequest({\r",
							"    url: `${baseUrl}/api/items/${validId}`,\r",
							"    method: \"PUT\",\r",
							"    header: { \"Content-Type\": \"application/json\" },\r",
							"    body: {\r",
							"        mode: \"raw\",\r",
							"        raw: JSON.stringify({\r",
							"            name: \"Incomplete Product\"\r",
							"        })\r",
							"    }\r",
							"}, function (err, res) {\r",
							"    pm.test(\"Invalid Item Data: Status code is 400\", function () {\r",
							"        pm.expect(res.code).to.eql(400);\r",
							"    });\r",
							"\r",
							"    pm.test(\"Invalid Item Data: Error message exists\", function () {\r",
							"        let jsonData = res.json();\r",
							"        pm.expect(jsonData).to.have.property(\"error\").that.is.a(\"string\");\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"product\",\r\n    \"quantity\": 12,\r\n    \"cost\": 10,\r\n    \"supplier\": \"somebody else\",\r\n    \"expiration_date\": \"2025-02-02\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/api/items/999999",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"items",
						"999999"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete item",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const baseUrl = pm.environment.get(\"baseUrl\") || \"http://localhost:3000\";\r",
							"const validId = 2;\r",
							"const nonExistentId = 9999;\r",
							"\r",
							"pm.sendRequest({\r",
							"    url: `${baseUrl}/api/items/${validId}`,\r",
							"    method: \"DELETE\"\r",
							"}, function (err, res) {\r",
							"    pm.test(\"Valid Deletion: Status code is 200\", function () {\r",
							"        pm.expect(res.code).to.eql(200);\r",
							"    });\r",
							"\r",
							"    pm.test(\"Valid Deletion: Response indicates changes\", function () {\r",
							"        let jsonData = res.json();\r",
							"        pm.expect(jsonData).to.have.property(\"changes\").that.is.a(\"number\").and.to.eql(1);\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.sendRequest({\r",
							"    url: `${baseUrl}/api/items/abc`,\r",
							"    method: \"DELETE\"\r",
							"}, function (err, res) {\r",
							"    pm.test(\"Invalid ID: Status code is 400\", function () {\r",
							"        pm.expect(res.code).to.eql(400);\r",
							"    });\r",
							"\r",
							"    pm.test(\"Invalid ID: Error message exists\", function () {\r",
							"        let jsonData = res.json();\r",
							"        pm.expect(jsonData).to.have.property(\"error\").that.is.a(\"string\");\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.sendRequest({\r",
							"    url: `${baseUrl}/api/items/${nonExistentId}`,\r",
							"    method: \"DELETE\"\r",
							"}, function (err, res) {\r",
							"    pm.test(\"Non-Existent ID: Status code is 200\", function () {\r",
							"        pm.expect(res.code).to.eql(200);\r",
							"    });\r",
							"\r",
							"    pm.test(\"Non-Existent ID: No changes made\", function () {\r",
							"        let jsonData = res.json();\r",
							"        pm.expect(jsonData).to.have.property(\"changes\").that.is.a(\"number\").and.to.eql(0);\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/items/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"items",
						"1"
					]
				}
			},
			"response": []
		}
	]
}